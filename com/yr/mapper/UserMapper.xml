<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 命名空间 -->
<mapper namespace="com.UserMapper">
    <!--申明sql语段-->
    <sql id="userFields">
      select * from user
    </sql>
    <select id="testFindUserByUsername" parameterType="QueryVo" resultType="user">
        <include refid="userFields"/>
        where
               username like '%${username}%'
    </select>


<select id="queryUserByWhere" parameterType="user" resultType="user">
        <include refid="userFields"/>
        <!-- where标签可以自动添加where，同时处理sql语句中第一个and关键字 -->
        <where>
            <if test="sex != null and sex != ''">
                and sex=#{sex}
            </if>

            <if test="username != null and username != ''">
              AND username LIKE
                '%${username}%'
           </if>
         </where>
</select>
    
    <select id="queryUserByIds" parameterType="QueryVo" resultType="user">
        <include refid="userFields"/>
        <!-- foreach标签，进行遍历 -->
        <!-- collection：遍历的集合，这里是QueryVo的ids属性 -->
        <!-- item：遍历的项目，可以随便写，，但是和后面的#{}里面要一致 -->
        <!-- open：在前面添加的sql片段 -->
        <!-- close：在结尾处添加的sql片段 -->
        <!-- separator：指定遍历的元素之间使用的分隔符 -->
        <where>
            <foreach collection="ids" item="item" open="id in (" close=")" separator=",">
                #{item}
            </foreach>
        </where>

    </select>

    <select id="queryOrderUser" resultType="orderUser">
            SELECT
            o.id,
            o.user_id userId,
            o.number,
            o.createtime,
            o.note,
            u.username,
            u.address
            FROM
            orders o
            /*左关联 以左表为中心*/
            LEFT JOIN user u ON o.user_id = u.id
    </select>
    
    <resultMap id="orderUserResultMap" type="order">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="number" column="number"/>
        <result property="createtime" column="createtime"/>
        <result property="note" column="note"/>
        <!-- association ：配置一对一属性 -->
        <!-- property:order里面的User属性名 -->
        <!-- javaType:属性类型 -->
        <association property="user" javaType="user">
            <!-- id:声明主键，表示user_id是关联查询对象的唯一标识-->
            <id property="id" column="user_id" />
            <result property="username" column="username" />
            <result property="address" column="address" />
        </association>

    </resultMap>
    <!-- 一对一关联，查询订单，订单内部包含用户属性 -->
    <select id="queryOrderUserResultMap" resultMap="orderUserResultMap">
            SELECT
            o.id,
            o.user_id userId,
            o.number,
            o.createtime,
            o.note,
            u.username,
            u.address
            FROM
            orders o
            /*左关联 以左表为中心*/
            LEFT JOIN user u ON o.user_id = u.id
    </select>
    <resultMap id="userOrderResultMap" type="user">
        <id property="id" column="id" />
        <result property="username" column="username" />
        <result property="birthday" column="birthday" />
        <result property="sex" column="sex" />
        <result property="address" column="address" />
     <collection property="orders" javaType="list" ofType="order">
         <!-- 配置主键，是关联Order的唯一标识 -->
         <id property="id" column="oid" />
         <result property="number" column="number" />
         <result property="createtime" column="createtime" />
         <result property="note" column="note" />
     </collection>

    </resultMap>

    <select id="queryUserOrder" resultMap="userOrderResultMap">
            SELECT
            u.id,
            u.username,
            u.birthday,
            u.sex,
            u.address,
            o.id oid,
            o.number,
            o.createtime,
            o.note

            FROM
            user u
            /*左关联 以左表为中心*/
            LEFT JOIN orders o ON u.id=o.user_id
    </select>



</mapper>
